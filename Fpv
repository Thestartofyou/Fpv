from dronekit import connect, VehicleMode, LocationGlobalRelative
import time

# Connect to the drone (use your actual connection string)
connection_string = "/dev/serial0"  # Example for a serial connection
vehicle = connect(connection_string, wait_ready=True)

# Arm and take off
def arm_and_takeoff(target_altitude):
    print("Basic pre-arm checks")
    # Ensure the vehicle is in the GUIDED mode and the system is ready
    while not vehicle.is_armable:
        print("Waiting for vehicle to become armable...")
        time.sleep(1)

    print("Arming motors")
    vehicle.mode = VehicleMode("GUIDED")
    vehicle.armed = True

    while not vehicle.armed:
        print("Waiting for arming...")
        time.sleep(1)

    print("Taking off!")
    vehicle.simple_takeoff(target_altitude)

    while True:
        print("Altitude: ", vehicle.location.global_relative_frame.alt)
        if vehicle.location.global_relative_frame.alt >= target_altitude * 0.95:
            print("Reached target altitude")
            break
        time.sleep(1)

# Move to a specific location
def goto_location(latitude, longitude, altitude):
    print(f"Flying to {latitude}, {longitude}")
    location = LocationGlobalRelative(latitude, longitude, altitude)
    vehicle.simple_goto(location)

    while True:
        current_location = vehicle.location.global_relative_frame
        distance = get_distance_metres(current_location, location)
        print(f"Distance to target: {distance}")
        if distance < 1:
            print("Reached target location")
            break
        time.sleep(2)

# Get the distance between two points in meters
def get_distance_metres(aLocation1, aLocation2):
    dlat = aLocation2.lat - aLocation1.lat
    dlong = aLocation2.lon - aLocation1.lon
    return ((dlat**2) + (dlong**2))**0.5 * 1.113195e5

# Main function to control the drone
def main():
    try:
        arm_and_takeoff(10)  # Target altitude of 10 meters
        goto_location(37.7749, -122.4194, 10)  # Example location (San Francisco)
        print("Mission complete")
    finally:
        print("Landing...")
        vehicle.mode = VehicleMode("LAND")
        vehicle.close()

if __name__ == "__main__":
    main()
